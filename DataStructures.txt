// UnionFind (0-based)
struct DSU {
    int N;
    vector<int> parent, member;
    DSU() { N = 0; }
    DSU(int n) {
        N = n;
        parent.resize(n);
        member.resize(n);
        for (int i = 0; i < n; i++) { parent[i] = -1; member[i] = 1; }
    }
    int root(int n) {
        if (parent[n] == -1) { return n; }
        return parent[n] = root(parent[n]);
    }
    void merge(int r1, int r2) {
        r1 = root(r1);
        r2 = root(r2);
        if (r1 == r2) { return; }
        if (member[r1] < member[r2]) { swap(r1, r2); }
        parent[r2] = r1;
        member[r1] += member[r2];
    }
};


// Fenwick Tree (0-based)
struct fenwick {
    int n;
    vector<int> seg;
    fenwick(int n) {
        this->n = n;
        seg.resize(n);
    }
    int query(int r) {
        if (r<0){return 0;}
        int ret = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1){
            ret += seg[r];
        }
        return ret;
    }
    void update(int i, int inc) {
        for (; i < n; i = i | (i + 1)){
            seg[i] += inc;
        }
    }
    int query(int l, int r){
        if (l>r){return 0;}
        return query(r) - query(l-1);
    }
};

// Segment Tree (0-based)
// 구간 [L,R]에 관련된 쿼리를 반복적으로 처리해야 할 때 생각한다.

struct sumseg{
    int N;
    vector<ll> a,seg;
    sumseg(){N=0;}
    sumseg(int n){
        N=n;
        a.resize(N);
        seg.resize(2*N);
    }
    void init(){
        for (int i=0;i<N;i++){seg[i+N]=a[i];}
        for (int i=N-1;i>=1;i--){
            seg[i] = seg[i<<1]+seg[i<<1|1];
        }
    }
    void update(int i, ll val){
        a[i] = val;
        seg[i+N]=val;
        int p = (i+N)>>1;
        while(p>0){
            seg[p] = seg[p<<1]+seg[p<<1|1];
            p>>=1;
        }
    }
    ll query(int l, int r){
        if (l>r){return 0LL;}
        ll ret=0;
        int lp,rp;
        lp = l+N; rp=r+N+1;
        while(lp<rp){
            if (lp&1){ret+=seg[lp++];}
            if (rp&1){ret+=seg[--rp];}
            lp>>=1; rp>>=1;
        }
        return ret;
    }
};

struct maxseg{
    int N;
    vector<ll> a,seg;
    maxseg(){N=0;}
    maxseg(int n){
        N=n;
        a.resize(N);
        seg.resize(2*N);
    }
    void init(){
        for (int i=0;i<N;i++){seg[i+N]=a[i];}
        for (int i=N-1;i>=1;i--){
            seg[i] = max(seg[i<<1],seg[i<<1|1]);
        }
    }
    void update(int i, ll val){
        a[i] = val;
        seg[i+N]=val;
        int p = (i+N)>>1;
        while(p>0){
            seg[p] = max(seg[p<<1],seg[p<<1|1]);
            p>>=1;
        }
    }
    ll query(int l, int r){
        if (l>r){return -LLINF;}
        ll ret=-LLINF;
        int lp,rp;
        lp = l+N; rp=r+N+1;
        while(lp<rp){
            if (lp&1){ret=max(ret,seg[lp++]);}
            if (rp&1){ret=max(ret,seg[--rp]);}
            lp>>=1; rp>>=1;
        }
        return ret;
    }
};

struct minseg{
    int N;
    vector<ll> a,seg;
    minseg(){N=0;}
    minseg(int n){
        N=n;
        a.resize(N);
        seg.resize(2*N);
    }
    void init(){
        for (int i=0;i<N;i++){seg[i+N]=a[i];}
        for (int i=N-1;i>=1;i--){
            seg[i] = min(seg[i<<1],seg[i<<1|1]);
        }
    }
    void update(int i, ll val){
        a[i] = val;
        seg[i+N]=val;
        int p = (i+N)>>1;
        while(p>0){
            seg[p] = min(seg[p<<1],seg[p<<1|1]);
            p>>=1;
        }
    }
    ll query(int l, int r){
        if (l>r){return LLINF;}
        ll ret=LLINF;
        int lp,rp;
        lp = l+N; rp=r+N+1;
        while(lp<rp){
            if (lp&1){ret=min(ret,seg[lp++]);}
            if (rp&1){ret=min(ret,seg[--rp]);}
            lp>>=1; rp>>=1;
        }
        return ret;
    }
};

struct gcdseg{
    int N;
    vector<ll> a,seg;
    gcdseg(){N=0;}
    gcdseg(int n){
        N=n;
        a.resize(N);
        seg.resize(2*N);
    }
    void init(){
        for (int i=0;i<N;i++){seg[i+N]=a[i];}
        for (int i=N-1;i>=1;i--){
            seg[i] = gcd(seg[i<<1],seg[i<<1|1]);
        }
    }
    void update(int i, ll val){
        a[i] = val;
        seg[i+N]=val;
        int p = (i+N)>>1;
        while(p>0){
            seg[p] = gcd(seg[p<<1],seg[p<<1|1]);
            p>>=1;
        }
    }
    ll query(int l, int r){
        if (l>r){return 0LL;}
        ll ret=0;
        int lp,rp;
        lp = l+N; rp=r+N+1;
        while(lp<rp){
            if (lp&1){ret=gcd(ret,seg[lp++]);}
            if (rp&1){ret=gcd(ret,seg[--rp]);}
            lp>>=1; rp>>=1;
        }
        return ret;
    }
};


// 2D Segment Tree (0-based)
// 2차원 직사각형 영역에 관련된 쿼리를 반복적으로 처리해야 할 때 생각한다.
// seg2d(N,M)으로 각각 y값과 x값의 최대를 선언하고 시작한다.
struct seg2d{
    struct Node{
        int v,l,r;
        Node(){v=l=r=0;}
    };
    int M,N,sz=2;
    vector<int> L,R;
    vector<Node> t;
    vector<vector<Node>> seg;
    seg2d(int N, int M):N(N),M(M){
        L.resize(2); R.resize(2); t.resize(2); seg.resize(2,t);
    }
    void upd1(int x, int val, int l, int r, int ny, int nx){
        if (l==r){
            seg[ny][nx].v = val; return;
        }
        seg[ny][nx].v = max(seg[ny][nx].v, val);
        int mid = (l+r)>>1;
        if (x<=mid){
            if (seg[ny][nx].l==0){
                seg[ny].push_back(Node());
                seg[ny][nx].l = seg[ny].size()-1;
            }
            upd1(x,val,l,mid,ny,seg[ny][nx].l);
        }else{
            if (seg[ny][nx].r==0){
                seg[ny].push_back(Node());
                seg[ny][nx].r = seg[ny].size()-1;
            }
            upd1(x,val,mid+1,r,ny,seg[ny][nx].r);
        }
    }
    void upd2(int y, int x, int val, int l, int r, int ny){
        upd1(x,val,0,N,ny,1);
        if (l==r){return;}

        int mid = (l+r)>>1;
        if (y<=mid){
            if (L[ny]==0){
                seg.push_back(t); L.push_back(0); R.push_back(0); ++sz;
                L[ny] = sz-1;
            }
            upd2(y,x,val,l,mid,L[ny]);
        }else{
            if (R[ny]==0){
                seg.push_back(t); L.push_back(0); R.push_back(0); ++sz;
                R[ny] = sz-1;
            }
            upd2(y,x,val,mid+1,r,R[ny]);
        }
    }
    int query1(int x1, int x2, int l, int r, int ny, int nx){
        if (ny==0 || nx==0){return 0;}
        if (x2<l || r<x1){return 0;}
        if (x1<=l && r<=x2){return seg[ny][nx].v;}
        int mid = (l+r)>>1;
        return max(query1(x1,x2,l,mid,ny, seg[ny][nx].l),query1(x1,x2,mid+1,r,ny, seg[ny][nx].r));
    }
    int query2(int y1, int y2, int x1, int x2, int l, int r, int ny){
        if (ny==0){return 0;}
        if (y2<l || r<y1){return 0;}
        if (y1<=l && r<=y2){return query1(x1,x2,0,N,ny,1);}
        int mid = (l+r)>>1;
        return max(query2(y1,y2,x1,x2,l,mid,L[ny]), query2(y1,y2,x1,x2,mid+1,r,R[ny]));
    }
    void update(int y, int x, int val){
        upd2(y,x,val,0,N,1);
    }
    int query(int y1, int x1, int y2, int x2){
        return query2(y1,y2,x1,x2,0,N,1);
    }
};


// Lazy Propagation - 세그트리 update를 할때 원소 하나만 update하는게 아니라 [L,R] 범위를 모두 update할때 쓴다
// 구간 update : O(logN)에 [L,R]을 update 할수있다.
// (0-based)


struct lazy_sumseg {
    int N;
    vector<ll> a, seg, lazy;
    lazy_sumseg() { N = 0; }
    lazy_sumseg(int n) {
        N = n;
        int M=1;
        while(M<N){M<<=1;}
        a.resize(n);
        seg.resize(M<<1);
        lazy.resize(M<<1);
    }

    void maketree(int l, int r, int node) {
        if (l == r) { seg[node] = a[l]; return; }
        int mid = (l + r) >> 1;
        maketree(l, mid, node * 2);
        maketree(mid + 1, r, node * 2 + 1);
        seg[node] = seg[node * 2] + seg[node * 2 + 1];
    }
    void propagate(int l, int r, int node) {
        if (l == r) { seg[node] = seg[node] + lazy[node]; lazy[node] = 0; return; }
        seg[node] = seg[node] + lazy[node] * (r - l + 1);
        lazy[node * 2] = lazy[node*2] + lazy[node];
        lazy[node * 2 + 1] = lazy[node*2+1] + lazy[node];
        lazy[node] = 0;
    }
    void update(int l, int r, int from, int to, ll inc, int node) {
        propagate(l, r, node);
        if (from <= l && r <= to) { lazy[node] = lazy[node] + inc; propagate(l, r, node); return; }
        if (from > r || to < l) { return; }
        int mid = (l + r) >> 1;
        update(l, mid, from, to, inc, node * 2);
        update(mid + 1, r, from, to, inc, node * 2 + 1);
        seg[node] = seg[node * 2] + seg[node * 2 + 1];
    }
    ll query(int l, int r, int from, int to, int node) {
        propagate(l, r, node);
        if (from <= l && r <= to) { return seg[node]; }
        if (from > r || to < l) { return 0; }
        int mid = (l + r) >> 1;
        return query(l, mid, from, to, node * 2) + query(mid + 1, r, from, to, node * 2 + 1);
    }
    void maketree() { maketree(0,N-1,1); }
    void update(int from, int to, ll inc) { update(0,N-1, from, to, inc, 1); }
    ll query(int from, int to) { return query(0,N-1, from, to, 1); }
};

struct lazy_maxseg {
    int N;
    vector<ll> a, seg, lazy;
    lazy_maxseg() { N = 0; }
    lazy_maxseg(int n) {
        N = n;
        int M=1;
        while(M<N){M<<=1;}
        a.resize(n);
        seg.resize(M<<1);
        lazy.resize(M<<1);
    }

    void maketree(int l, int r, int node) {
        if (l == r) { seg[node] = a[l]; return; }
        int mid = (l + r) >> 1;
        maketree(l, mid, node * 2);
        maketree(mid + 1, r, node * 2 + 1);
        seg[node] = max(seg[node * 2], seg[node * 2 + 1]);
    }
    void propagate(int l, int r, int node) {
        if (l == r) { seg[node] = seg[node] + lazy[node]; lazy[node] = 0; return; }
        seg[node] = seg[node] + lazy[node];
        lazy[node * 2] = lazy[node*2] + lazy[node];
        lazy[node * 2 + 1] = lazy[node*2+1] + lazy[node];
        lazy[node] = 0;
    }
    void update(int l, int r, int from, int to, ll inc, int node) {
        propagate(l, r, node);
        if (from <= l && r <= to) { lazy[node] =lazy[node] + inc; propagate(l, r, node); return; }
        if (from > r || to < l) { return; }
        int mid = (l + r) >> 1;
        update(l, mid, from, to, inc, node * 2);
        update(mid + 1, r, from, to, inc, node * 2 + 1);
        seg[node] = max(seg[node * 2], seg[node * 2 + 1]);
    }
    ll query(int l, int r, int from, int to, int node) {
        propagate(l, r, node);
        if (from <= l && r <= to) { return seg[node]; }
        if (from > r || to < l) { return -LLINF; }
        int mid = (l + r) >> 1;
        return max(query(l, mid, from, to, node * 2), query(mid + 1, r, from, to, node * 2 + 1));
    }
    void maketree() { maketree(0,N-1, 1); }
    void update(int from, int to, ll inc) { update(0,N-1, from, to, inc, 1); }
    ll query(int from, int to) { return query(0,N-1, from, to, 1); }
};

struct lazy_minseg {
    int N;
    vector<ll> a, seg, lazy;
    lazy_minseg() { N = 0; }
    lazy_minseg(int n) {
        N = n;
        int M=1;
        while(M<N){M<<=1;}
        a.resize(n);
        seg.resize(M<<1);
        lazy.resize(M<<1);
    }

    void maketree(int l, int r, int node) {
        if (l == r) { seg[node] = a[l]; return; }
        int mid = (l + r) >> 1;
        maketree(l, mid, node * 2);
        maketree(mid + 1, r, node * 2 + 1);
        seg[node] = min(seg[node * 2], seg[node * 2 + 1]);
    }
    void propagate(int l, int r, int node) {
        if (l == r) { seg[node] = seg[node] + lazy[node]; lazy[node] = 0; return; }
        seg[node] = seg[node] + lazy[node];
        lazy[node * 2] = lazy[node*2] + lazy[node];
        lazy[node * 2 + 1] = lazy[node*2+1] + lazy[node];
        lazy[node] = 0;
    }
    void update(int l, int r, int from, int to, ll inc, int node) {
        propagate(l, r, node);
        if (from <= l && r <= to) { lazy[node] = lazy[node] + inc; propagate(l, r, node); return; }
        if (from > r || to < l) { return; }
        int mid = (l + r) >> 1;
        update(l, mid, from, to, inc, node * 2);
        update(mid + 1, r, from, to, inc, node * 2 + 1);
        seg[node] = min(seg[node * 2], seg[node * 2 + 1]);
    }
    ll query(int l, int r, int from, int to, int node) {
        propagate(l, r, node);
        if (from <= l && r <= to) { return seg[node]; }
        if (from > r || to < l) { return LLINF; }
        int mid = (l + r) >> 1;
        return min(query(l, mid, from, to, node * 2), query(mid + 1, r, from, to, node * 2 + 1));
    }
    void maketree() { maketree(0,N-1, 1); }
    void update(int from, int to, ll inc) { update(0,N-1, from, to, inc, 1); }
    ll query(int from, int to) { return query(0,N-1, from, to, 1); }
};

struct lazy_xorseg {
    int N;
    vector<ll> a, seg, lazy;
    lazy_xorseg() { N = 0; }
    lazy_xorseg(int n) {
        N = n;
        int M=1;
        while(M<N){M<<=1;}
        a.resize(n);
        seg.resize(M<<1);
        lazy.resize(M<<1);
    }

    void maketree(int l, int r, int node) {
        if (l == r) { seg[node] = a[l]; return; }
        int mid = (l + r) >> 1;
        maketree(l, mid, node * 2);
        maketree(mid + 1, r, node * 2 + 1);
        seg[node] = seg[node * 2] ^ seg[node * 2 + 1];
    }
    void propagate(int l, int r, int node) {
        if (l == r) { seg[node] = seg[node] ^ lazy[node]; lazy[node] = 0; return; }
        if ((r - l + 1) % 2) { seg[node] = seg[node] ^ lazy[node]; }
        lazy[node * 2] = lazy[node*2] ^ lazy[node];
        lazy[node * 2 + 1] = lazy[node*2+1] ^ lazy[node];
        lazy[node] = 0;
    }
    void update(int l, int r, int from, int to, ll inc, int node) {
        propagate(l, r, node);
        if (from <= l && r <= to) { lazy[node] = lazy[node] ^ inc; propagate(l, r, node); return; }
        if (from > r || to < l) { return; }
        int mid = (l + r) >> 1;
        update(l, mid, from, to, inc, node * 2);
        update(mid + 1, r, from, to, inc, node * 2 + 1);
        seg[node] = seg[node * 2] ^ seg[node * 2 + 1];
    }
    ll query(int l, int r, int from, int to, int node) {
        propagate(l, r, node);
        if (from <= l && r <= to) { return seg[node]; }
        if (from > r || to < l) { return 0; }
        int mid = (l + r) >> 1;
        return query(l, mid, from, to, node * 2) ^ query(mid + 1, r, from, to, node * 2 + 1);
    }
    void maketree() { maketree(0,N-1, 1); }
    void update(int from, int to, ll inc) { update(0,N-1, from, to, inc, 1); }
    ll query(int from, int to) { return query(0,N-1, from, to, 1); }
};


// Maximum Subarray segtree (0-based)
// 금광 세그
struct arrseg{
    struct arr{
        ll l,r,s,v;
        arr(){l=r=v=-LLINF; s=0;}
        arr(ll l, ll r, ll s, ll v):l(l),r(r),s(s),v(v){}
    };
    int N;
    vector<ll> a;
    vector<arr> seg;

    arrseg(){N=0;}
    arrseg(int N):N(N){
        a.resize(4*N);
        seg.resize(4*N);
    }
    void update(int l, int r, int i, ll val, int node){
        if (l==r){
            a[i] = val;
            seg[node] = {val,val,val,val};
            return;
        }
        int mid = (l+r)>>1;
        if (i<=mid){update(l,mid,i,val,node*2);}
        else{update(mid+1,r,i,val,node*2+1);}
        arr& a1 = seg[node*2];
        arr& a2 = seg[node*2+1];
        ll nl,nr,ns,nv;
        nl = max(a1.l, a1.s+a2.l);
        nr = max(a2.r, a2.s+a1.r);
        ns = a1.s+a2.s;
        nv = max({a1.v, a2.v, a1.r+a2.l});
        seg[node] = {nl,nr,ns,nv};
    }
    arr query(int l, int r, int from, int to, int node){
        if (to<l || r<from){return arr();}
        if (from<= l && r<=to){return seg[node];}
        int mid = (l+r)>>1;
        arr a1 = query(l,mid,from,to,node*2);
        arr a2 = query(mid+1,r,from,to,node*2+1);
        ll nl,nr,ns,nv;
        nl = max(a1.l, a1.s+a2.l);
        nr = max(a2.r, a2.s+a1.r);
        ns = a1.s+a2.s;
        nv = max({a1.v, a2.v, a1.r+a2.l});
        return {nl,nr,ns,nv};
    }
    void update(int i, ll val){update(0,N-1,i,val,1);}
    arr query(int from, int to){return query(0,N-1,from,to,1);}
};


// Merge Sort Tree (0-based)
// 구간 update는 없다
// 각 노드에 정렬된 상태의 배열을 가지고 있다. (Space : NlogN)
// operation을 정의해 사용한다. (Time : NlogN * operation)

struct mergetree{
    int N;
    vector<ll> a;
    vector<vector<ll>> seg;

    mergetree(){N=0;}
    mergetree(int n){
        N=n;
        a.resize(N);
        seg.resize(2*N);
    }
    void init(){
        for (int i=0;i<N;i++){seg[i+N].push_back(a[i]);}
        for (int i=N-1;i>=1;i--){
            seg[i].resize(seg[i<<1].size() + seg[i<<1|1].size());
            merge(seg[i<<1].begin(), seg[i<<1].end(), seg[i<<1|1].begin(), seg[i<<1|1].end(), seg[i].begin());
        }
    }
    ll query(int l, int r){
        if (l>r){return 0LL;}
        ll ret=0;
        int lp,rp;
        lp = l+N; rp=r+N+1;
        while(lp<rp){
            if (lp&1){
                // define operation here

                ++lp;
            }
            if (rp&1){
                --rp;
                //define operation here

            }
            lp>>=1; rp>>=1;
        }
        return ret;
    }
};


// Persistence Segment Tree
// head[i]에 i번째 수정본의 루트를 추가하고 update한다
// operation을 정의해 사용한다.
// Space : O(N + Q*logN)
// Time : O(logN)

struct pst{
    struct Node{
        int l,r,c;
        ll v;
        Node(){l=r=c=v=0;}
    };

    int sz = 1;
    Node seg[20*MAX];
    void update(int i, int inc, int l, int r, int node, int prev){
        if (l==r){
            seg[node].c = seg[prev].c + 1;
            seg[node].v = seg[prev].v + inc;
            return;
        }
        int mid = (l+r)>>1;
        seg[node].c = seg[prev].c +1;
        seg[node].v = seg[prev].v + inc;
        ++sz;
        if (i<=mid){
            seg[node].l = sz-1;
            seg[node].r = seg[prev].r;
            update(i,inc,l,mid,seg[node].l, seg[prev].l);
        }else{
            seg[node].r = sz-1;
            seg[node].l = seg[prev].l;
            update(i,inc,mid+1,r,seg[node].r, seg[prev].r);
        }
    }
    ll vquery(int from, int to, int l, int r, int node){
        if (from>to || node==0 || to<l || r<from){return 0;}
        if (from<=l && r<=to){return seg[node].v;}
        int mid = (l+r)>>1;
        return vquery(from,to,l,mid,seg[node].l) + vquery(from,to,mid+1,r,seg[node].r);
    }
    int cquery(int from, int to, int l, int r, int node){
        if (from>to || node==0 || to<l || r<from){return 0;}
        if (from<=l && r<=to){return seg[node].c;}
        int mid = (l+r)>>1;
        return cquery(from,to,l,mid,seg[node].l) + cquery(from,to,mid+1,r,seg[node].r);
    }
    // [L,R] 구간에서 k번째로 큰 원소를 찾는다.
    // rt[R] = hr에, rt[L-1] = hl으로 설정하고 시작해야한다.
    int kth(int k, int hl, int hr, int l, int r){
        if (l==r){
            return l;
        }
        int mid = (l+r)>>1;
        int x = seg[seg[hr].r].c - seg[seg[hl].r].c;
        if (x >= k){
            return kth(k,seg[hl].r, seg[hr].r, mid+1,r);
        }else{
            return kth(k-x,seg[hl].l, seg[hr].l, l,mid);
        }
    }
};

// Splay Tree (amortized O(logN))
struct SplayTree{
    struct Node{
        Node *l, *r, *p;
        ll val,sum,lazy;
        int sz;
        Node(ll v, Node* p = nullptr) : p(p){
            l = r = nullptr;
            val = sum = v;
            lazy = 0;
            sz = 1;
        }
        Node() : Node(0){}
        ~Node(){
            if (l){delete(l);}
            if (r){delete(r);}
        }
    };

    int N;
    Node* root;
    vector<Node*> ptr;
    vector<ll> a;

    SplayTree(int n) : root(){
        N = n;
        a.resize(n+2);
        ptr.resize(n+2);
        if (root){delete(root);}
        root = new Node(0);
    }
    ~SplayTree(){
        if(root) delete root;
    }
    void init(){
        if (root){delete root;}
        root = new Node(0);
        ptr[0] = root;
        Node* cur = root;
        for (int i=1;i<=N+1;i++){
            ptr[i] = new Node(a[i],cur);
            cur->r = ptr[i];
            cur = cur->r;
        }
        for (int i=N+1;i>=0;i--){
            pull(ptr[i]);
        }
        splay(ptr[N/2]);      
    }
    void push(Node* x){
        x->val += x->lazy;
        if (x->l){
            x->l->lazy += x->lazy;
            x->l->sum += x->l->sz * x->lazy;
        }
        if (x->r){
            x->r->lazy += x->lazy;
            x->r->sum += x->r->sz * x->lazy;
        }
        x->lazy = 0;
    }
    void pull(Node* x){
        push(x);
        x->sz = 1;
        x->sum = x->val;
        if (x->l){
            x->sz += x->l->sz;
            x->sum += x->l->sum;
        }
        if (x->r){
            x->sz += x->r->sz;
            x->sum += x->r->sum;
        }
    }
    void update(int l, int r, ll inc){
        auto x = gather(l,r);
        x->lazy += inc;
        x->sum += x->sz * inc;
        push(x);
    }
    void rotate(Node* x){
        Node* p = x->p;
        Node* b;
        if (!p){return;}
        if (x == p->l){
            b = x->r;
            p->l = b;
            x->r = p;
        }else{
            b = x->l;
            p->r = b;
            x->l = p;
        }
        Node *g = p->p;
        p->p = x;
        x->p = g;
        if (b){b->p = p;}
        if (g){
            if (g->l == p){g->l = x;}
            else{g->r = x;}
        }else{
            root = x;
        }
        pull(p);
        pull(x);
    }
    void splay(Node *x, Node *r = nullptr){
        while(x->p != r){
            Node* p = x->p;
            Node* g = p->p;

            if (g != r){
                if ((x==p->l) == (p==g->l)){
                    rotate(p);
                    rotate(x);
                }else{
                    rotate(x);
                    rotate(x);
                }
            }else{
                rotate(x); break;
            }
        }
        if (!r){root = x;}
    }
    void kth(int k){
        Node* cur = root;
        push(cur);
        while(1){
            if (cur->l && cur->l->sz > k){
                cur = cur->l; 
                push(cur);
                continue;
            }
            if (cur->l){
                k -= cur->l->sz;
            }
            if (k==0){
                splay(cur);
                return;
            }
            --k;
            cur = cur->r;
            push(cur);
        }
    }
    Node* gather(int s, int e){
        kth(e+1);
        Node* r = root;
        kth(s-1);
        splay(r, root);
        return root->r->l;
    }
};



// Sparse Table (0-based)
범위 [L,R]이 주어졌을 때 Function(L,L+1,...,R)을 빠르게 한다
조건1) Array에 저장된 값이 변하면 안된다.
조건2) Function은 결합법칙이 성립해야 한다.
-> Sparse table 만들기 O(NlogN)
-> 쿼리 1개 처리 O(logN) // O(1)

struct minsps{
    int N,M;
    vector<ll> a;
    vector<vector<ll>> v;
    minsps(int n){
        N = n;
        M = 31 - __builtin_clz(N);
        a.resize(N);
        v.resize(M+1);
        for (int j=0;j<=M;j++){v[j].resize(N);}
    }
    void init(){
        for(int i=0;i<N;i++){v[0][i] = a[i];}
        for (int j=1;j<=M;j++){
            for(int i=0;i<N;i++){
                if (i+(1<<j-1)<N){
                    v[j][i] = min(v[j-1][i], v[j-1][i+(1<<j-1)]);
                }
            }
        }
    }
    ll query(int l, int r){
        int d = r-l+1;
        int m = 31 - __builtin_clz(d);
        return min(v[m][l], v[m][r+1-(1<<m)]);
    }
};

struct maxsps{
    int N,M;
    vector<ll> a;
    vector<vector<ll>> v;
    maxsps(int n){
        N = n;
        M = 31 - __builtin_clz(N);
        a.resize(N);
        v.resize(M+1);
        for (int j=0;j<=M;j++){v[j].resize(N);}
    }
    void init(){
        for(int i=0;i<N;i++){v[0][i] = a[i];}
        for (int j=1;j<=M;j++){
            for(int i=0;i<N;i++){
                if (i+(1<<j-1)<N){
                    v[j][i] = max(v[j-1][i], v[j-1][i+(1<<j-1)]);
                }
            }
        }
    }
    ll query(int l, int r){
        int d = r-l+1;
        int m = 31 - __builtin_clz(d);
        return max(v[m][l], v[m][r+1-(1<<m)]);
    }
};

// min-max-queue
// queue 내의 min과 max값을 구할 수 있다.
// 나머지 push,empty,pop,front는 일반 queue 연산과 같고
// getmin, getmax 통해서 queue 내의 min,max 구할수 있다.

template <typename T>
struct minmaxqueue{
    int N;
    stack<T> s1,s2,ms1,ms2,Ms1,Ms2;

    minmaxqueue<T>(){N=0;}
    int size(){return N;}
    bool empty(){return (N==0)? true:false;}

    void push(T x){
        if (s2.empty()){ms2.push(x); Ms2.push(x);}
        else{
            if (ms2.top()>x){ms2.push(x);}
            else{ms2.push(ms2.top());}
            if (Ms2.top()<x){Ms2.push(x);}
            else{Ms2.push(Ms2.top());}
        }
        s2.push(x);
        ++N;
    };

    T front(){
        if (s1.empty()){
            while(!ms2.empty()){ms2.pop();}
            while(!Ms2.empty()){Ms2.pop();}
            while(!s2.empty()){
                T tmp = s2.top(); s2.pop();
                if (s1.empty()){ms1.push(tmp); Ms1.push(tmp);}
                else{
                    if (ms1.top()>tmp){ms1.push(tmp);}
                    else{ms1.push(ms1.top());}
                    if (Ms1.top()<tmp){Ms1.push(tmp);}
                    else{Ms1.push(Ms1.top());}
                }
                s1.push(tmp);
            }
        }
        T ret = s1.top();
        return ret;
    };
    void pop(){
        T tmp = front();
        s1.pop(); ms1.pop(); Ms1.pop();
        --N;
    };

    T getmin(){
        T ret;
        if (!ms1.empty() && !ms2.empty()){ret = min(ms1.top(),ms2.top());}
        else if (!ms1.empty()){ret=ms1.top();}
        else{ret=ms2.top();}
        return ret;
    };
    T getmax(){
        T ret;
        if (!Ms1.empty() && !Ms2.empty()){ret=max(Ms1.top(),Ms2.top());}
        else if (!Ms1.empty()){ret=Ms1.top();}
        else{ret=Ms2.top();}
        return ret;
    };
};


// PBDS set
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define pbds tree<int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update>

// pbds st;
// st.insert(x) : set에 x 삽입
// st.erase(x) : set에서 x 삭제
// st.find_by_order(x) : set을 일차원 배열로 생각했을 때 x+1번째 원소 포인터 반환
// st.order_of_key(x) : set에서 x보다 작은 원소 개수 반환


// PBDS multiset
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define pbds tree<int, null_type, less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
void m_erase(pbds& st, int x){
    int p = st.order_of_key(x);
    if (*st.find_by_order(p)==x){st.erase(st.find_by_order(p));}
}
// pbds st;
// st.insert(x) : multiset에 x 삽입
// m_erase(st, x) : multiset에서 x 삭제
// st.find_by_order(x) : multiset을 일차원 배열로 생각했을 때 x+1번째 원소 포인터 반환
// st.order_of_key(x) : multiset에서 x보다 작은 원소 개수 반환

// ROPE
namespace Rope{
    #include <ext/rope>  
    using namespace __gnu_cxx;
    void test(){
        rope<char> s = "abcdef";
        rope<char> t = "tttt";
        s.push_back('g'); // s = abcdefg - O(logN)
        s.pop_back(); // s = abcdef - O(logN)
        s.insert(1,t); // s = attttbcdef (insert t before s[1]) - O(N)
        s.erase(2,3); // s = atbcdef (erase s[2-4], 3 characters) - O(logN)
        rope<char> sub = s.substr(2,4); // sub = bcde (take s[2-5], 4 characters) - O(logN)
        rope<char> add = s+t; // add = atbcdeftttt (concatenate s+t) - O(1)
        s.replace(0,5,t); // s = ttttef (replace s[0-4] with t, 5 characters) - O(logN)
    }
}
