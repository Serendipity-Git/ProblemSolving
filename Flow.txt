// Dinic algorithm O(V^2*E)
// 0-based이다
// 단방향 그래프이다
struct maxflow{
    struct edge{
        int u,v;
        ll c,f=0;
        edge(int u, int v, ll c):u(u),v(v),c(c){}
    };

    int N,M=0,s,t;
    vector<edge> E;
    vector<int> level,see;
    vector<vector<int>> adj;
    queue<int> que;

    maxflow(int N):N(N){
        level.resize(N); see.resize(N); adj.resize(N);
    }
    void addEdge(int u, int v, ll c, bool undirected=0){
        if (undirected){
            E.emplace_back(u,v,c);
            E.emplace_back(v,u,c);
        }else{
            E.emplace_back(u,v,c);
            E.emplace_back(v,u,0);
        }
        adj[u].push_back(M);
        adj[v].push_back(M+1);
        M+=2;
    }
    bool bfs(){
        fill(level.begin(),level.end(),-1);
        que.push(s); level[s]=0;
        while(!que.empty()){
            int u = que.front(); que.pop();
            for (int& e:adj[u]){
                int v = E[e].v;
                if (E[e].c-E[e].f>0 && level[v]==-1){
                    level[v] = level[u]+1; que.push(v);
                }
            }
        }
        return (level[t]!=-1);
    }
    ll dfs(int u, ll flow){
        if (u==t){return flow;}
        if (flow==0){return 0;}

        for (int& i=see[u]; i<(int)adj[u].size();i++){
            int e = adj[u][i];
            ll sp = E[e].c - E[e].f;
            int v = E[e].v;
            if (sp>0 && level[v]==level[u]+1){
                ll f = dfs(v,min(flow,sp));
                if (f>0){
                    E[e].f+=f;
                    E[e^1].f-=f;
                    return f;
                }
            }
        }
        return 0;
    }
    ll query(int s, int t){
        ll ans=0;
        this->s = s; this->t = t;
        while(bfs()){
            fill(see.begin(),see.end(),0);
            while(ll flow = dfs(s,LLINF)){
                ans+=flow;
            }
        }
        return ans;
    }
};

// Konig's theorem
// vertex cover : subset of vertex S -> 모든 간선의 양 끝점 중 하나가 S에 포함됨
// independent set : subset of vertex S -> S에 속한 점끼리 edge가 존재하지 않음
// matching : subset of edge E -> E끼리는 인접하지 않음

// Konig's Theorem : In bigraph, |minimum vertex cover| = |maximum matching|
// How ? Find min-cut in bigraph, then (unreachable in A + reachable in B) = vertex cover = |min-cut|
// independent set = { U - vertex cover }


// MaxFlow - MinCost O(V*E*F)~O(E*F)
// 0-based이다
// 단방향이다
// edge의 cost까지도 추가해줘야 한다
struct mcmf{
    struct edge{
        int u,v;
        ll c,w,f=0;
        edge(int u, int v, ll c, ll w):u(u),v(v),c(c),w(w){}
    };

    int N,s,t,M=0;
    vector<edge> E;
    vector<int> back;
    vector<ll> dis,flow;
    vector<vector<int>> adj;
    queue<int> que;

    mcmf(int N):N(N){
        adj.resize(N);
        back.resize(N);
        flow.resize(N);
        dis.resize(N);
    }
    void addEdge(int u, int v, ll c, ll w){
        E.emplace_back(u,v,c,w);
        E.emplace_back(v,u,0,-w);
        adj[u].push_back(M);
        adj[v].push_back(M+1);
        M+=2;
    }
    void spfa(){
        fill(back.begin(),back.end(),-1);
        fill(flow.begin(),flow.end(),0);
        fill(dis.begin(),dis.end(),LLINF);

        dis[s]=0; que.push(s); flow[s]=LLINF;
        while(!que.empty()){
            int u = que.front(); que.pop();
            for (int& e:adj[u]){
                int v = E[e].v; 
                ll sp = E[e].c - E[e].f;
                ll w = E[e].w;
                if (sp>0 && dis[v]>dis[u]+w){
                    back[v] = e;
                    flow[v] = min(flow[u],sp);
                    dis[v] = dis[u]+w;
                    que.push(v);
                }
            }
        }
    }
    pii query(int s, int t){
        pii ans={0,0};
        this->s = s; this->t = t;
        while(true){
            spfa();
            if (flow[t]==0){return ans;}

            int u = t;
            ll f = flow[t];
            ans.first+=f;
            while(u!=s){
                int e = back[u];
                E[e].f+=f;
                E[e^1].f-=f;
                ll w = E[e].w;
                ans.second+=w*f;
                u = E[e].u;
            }
        }
    }
};


// Circulation by Dinic O(V^2*E)
// addEdge(u,v,l,r)로 edge 추가
// maxflow > graph.sum이면 가능한 flow가 없는 것이다.
// 설계한 circulation graph의 edge를 모두 설정하고 init()으로 circulation graph를 만든다
// 가능한 flow가 존재한다면, E[e].l + E[e].f로 e에 흐르는 실제 flow를 구할 수 있다.
struct circulation{
    struct edge{
        int u,v;
        ll c,l,f=0;
        edge(int u, int v, ll c, ll l):u(u),v(v),c(c),l(l){}
    };

    int N,s,t,M=0;
    ll sum=0;
    vector<ll> d;
    vector<int> level,see;
    vector<vector<int>> adj;
    vector<edge> E;
    queue<int> que;

    circulation(int N): N(N){
        level.resize(N); see.resize(N); d.resize(N);
        adj.resize(N);
    }
    void addEdge(int u, int v, ll l, ll r){
        d[u]+=l;
        d[v]-=l;
        E.emplace_back(u,v,r-l,l);
        E.emplace_back(v,u,0,0);
        adj[u].push_back(M);
        adj[v].push_back(M+1);
        M+=2;
    }
    void init(int new_s, int new_t){
        for (int i=0;i<N;i++){
            if (i==new_s || i==new_t){continue;}
            if (d[i]>0){
                addEdge(i,new_t,0,d[i]);
                sum+=d[i];
            }else if (d[i]<0){
                addEdge(new_s,i,0,-d[i]);
            }
        }
    }
    bool bfs(){
        fill(level.begin(),level.end(),-1);
        level[s]=0; que.push(s);
        while(!que.empty()){
            int u = que.front(); que.pop();
            for (int e:adj[u]){
                int v = E[e].v;
                ll sp = E[e].c - E[e].f;
                if (sp>0 && level[v]==-1){
                    level[v]=level[u]+1;
                    que.push(v);
                }
            }
        }
        return (level[t]!=-1);
    }
    ll dfs(int u ,ll flow){
        if (u==t){return flow;}
        if (flow==0){return 0;}

        for (int& i=see[u]; i<(int)adj[u].size();i++){
            int e = adj[u][i];
            ll sp = E[e].c - E[e].f;
            int v = E[e].v;
            if (sp>0 && level[v]==level[u]+1){
                ll f = dfs(v,min(flow,sp));
                if (f>0){
                    E[e].f+=f;
                    E[e^1].f-=f;
                    return f;
                }
            }
        }
        return 0;
    }
    ll query(int s, int t){
        this->s=s; this->t=t;
        ll ans = 0;
        while(bfs()){
            fill(see.begin(),see.end(),0);
            while(ll f = dfs(s,LLINF)){
                ans+=f;
            }
        }
        return ans;
    }
};


// Blossom Algorithm O(VE)
// maximum matching in general graph
vector<int> Blossom(vector<vector<int>>& graph) {
    int n = graph.size(), timer = -1;
    vector<int> mate(n, -1), label(n), parent(n), 
                orig(n), aux(n, -1), q;
    auto lca = [&](int x, int y) {
        for (timer++; ; swap(x, y)) {
        if (x == -1) continue;
        if (aux[x] == timer) return x;
        aux[x] = timer;
        x = (mate[x] == -1 ? -1 : orig[parent[mate[x]]]);
        }
    };
    auto blossom = [&](int v, int w, int a) {
        while (orig[v] != a) {
        parent[v] = w; w = mate[v];
        if (label[w] == 1) label[w] = 0, q.push_back(w);
        orig[v] = orig[w] = a; v = parent[w];
        }
    };
    auto augment = [&](int v) {
        while (v != -1) {
        int pv = parent[v], nv = mate[pv];
        mate[v] = pv; mate[pv] = v; v = nv;
        }
    };
    auto bfs = [&](int root) {
        fill(label.begin(), label.end(), -1);
        iota(orig.begin(), orig.end(), 0);
        q.clear(); 
        label[root] = 0; q.push_back(root);
        for (int i = 0; i < (int)q.size(); ++i) {
        int v = q[i];
        for (auto x : graph[v]) {
            if (label[x] == -1) {
            label[x] = 1; parent[x] = v;
            if (mate[x] == -1) 
                return augment(x), 1;
            label[mate[x]] = 0; q.push_back(mate[x]);
            } else if (label[x] == 0 && orig[v] != orig[x]) {
            int a = lca(orig[v], orig[x]);
            blossom(x, v, a); blossom(v, x, a);
            }
        }
        }
        return 0;
    };
    // Time halves if you start with (any) maximal matching.
    for (int i = 0; i < n; i++) 
        if (mate[i] == -1) 
        bfs(i);
    return mate;
}

// Hungarian Algorithm O(N^3 ~ N^4)
// Should be revised
vector<int> assignment(vector<vector<int>> a) {
    int n = a.size();
    int m = n * 2 + 2;
    vector<vector<int>> f(m, vector<int>(m));
    int s = m - 2, t = m - 1;
    int cost = 0;
    while (true) {
        vector<int> dist(m, INF);
        vector<int> p(m);
        vector<bool> inq(m, false);
        queue<int> q;
        dist[s] = 0;
        p[s] = -1;
        q.push(s);
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            inq[v] = false;
            if (v == s) {
                for (int i = 0; i < n; ++i) {
                    if (f[s][i] == 0) {
                        dist[i] = 0;
                        p[i] = s;
                        inq[i] = true;
                        q.push(i);
                    }
                }
            } else {
                if (v < n) {
                    for (int j = n; j < n + n; ++j) {
                        if (f[v][j] < 1 && dist[j] > dist[v] + a[v][j - n]) {
                            dist[j] = dist[v] + a[v][j - n];
                            p[j] = v;
                            if (!inq[j]) {
                                q.push(j);
                                inq[j] = true;
                            }
                        }
                    }
                } else {
                    for (int j = 0; j < n; ++j) {
                        if (f[v][j] < 0 && dist[j] > dist[v] - a[j][v - n]) {
                            dist[j] = dist[v] - a[j][v - n];
                            p[j] = v;
                            if (!inq[j]) {
                                q.push(j);
                                inq[j] = true;
                            }
                        }
                    }
                }
            }
        }

        int curcost = INF;
        for (int i = n; i < n + n; ++i) {
            if (f[i][t] == 0 && dist[i] < curcost) {
                curcost = dist[i];
                p[t] = i;
            }
        }
        if (curcost == INF)
            break;
        cost += curcost;
        for (int cur = t; cur != -1; cur = p[cur]) {
            int prev = p[cur];
            if (prev != -1)
                f[cur][prev] = -(f[prev][cur] = 1);
        }
    }

    vector<int> answer(n);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (f[i][j + n] == 1)
                answer[i] = j;
        }
    }
    return answer;
}