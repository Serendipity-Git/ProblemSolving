// Dinic algorithm O(V^2*E)

struct Edge {
	ll to, cap, flow;
	Edge* reverse;
	Edge(ll _to, ll _cap) : to(_to), cap(_cap), flow(0) {}
	ll spare() { return cap - flow; }
	void add(ll f) {
		this->flow += f;
		reverse->flow -= f;
	}
};

ll N, M, s, t;
ll level[MAX];
ll see[MAX];
queue<ll> myqueue;
vector<Edge*> adj[MAX];

// if undirected, change e2.cap -> cap
void addEdge(ll from, ll to, ll cap) {
	Edge* e1 = new Edge(to, cap);
	Edge* e2 = new Edge(from, 0);
	e1->reverse = e2; e2->reverse = e1;
	adj[from].push_back(e1);
	adj[to].push_back(e2);
}
bool bfs() {
	memset(level, -1, sizeof(level));
	level[s] = 0; myqueue.push(s);
	while (!myqueue.empty()) {
		ll cur = myqueue.front(); myqueue.pop();
		for (auto it : adj[cur]) {
			if (it->spare() > 0 && level[it->to] == -1) {
				myqueue.push(it->to); level[it->to] = level[cur] + 1;
			}
		}
	}
	if (level[t] == -1) { return false; }
	return true;
}
ll dfs(ll n, ll flow) {
	if (n == t) { return flow; }
	for (ll& i = see[n]; i < (ll)adj[n].size(); i++) {
		ll next = adj[n][i]->to;
		if (adj[n][i]->spare() > 0 && level[next] == level[n] + 1) {
			ll f = dfs(next, min(flow, adj[n][i]->spare()));
			if (f > 0) { adj[n][i]->add(f); return f; }
		}
	}
	return 0;
}
ll dinic() {
	ll ret = 0;
	while (bfs()) {
		memset(see, 0, sizeof(see));
		while (true) {
			ll f = dfs(s, INF);
			if (f == 0) { break; }
			ret += f;
		}
	}
	return ret;
}



// Hopcroft-Karp O(E*sqrt(V))

ll N, M;
ll L[MAX];
ll R[MAX];
ll level[MAX];
ll see[MAX];
vector<ll> adj[MAX];
queue<ll> myqueue;

bool dfs(ll n) {
	for (; see[n] < adj[n].size(); see[n]++) {
		ll it = adj[n][see[n]];
		if (R[it] == -1 || level[R[it]] == level[n] + 1 && dfs(R[it])) {
			L[n] = it;
			R[it] = n;
			return true;
		}
	}
	return false;
}
void bfs() {
	for (ll i = 0; i < N; i++) {
		if (L[i] == -1) { myqueue.push(i); level[i] = 0; }
		else { level[i] = INF; }
		see[i] = 0;
	}
	while (!myqueue.empty()) {
		ll cur = myqueue.front(); myqueue.pop();
		for (auto it : adj[cur]) {
			if (R[it] != -1 && level[R[it]] == INF) {
				myqueue.push(R[it]); level[R[it]] = level[cur] + 1;
			}
		}
	}
}
ll hopcroft() {
	ll ret = 0;
	memset(L, -1, sizeof(L));
	memset(R, -1, sizeof(R));
	while (true) {
		bfs();
		ll flow = 0;
		for (ll i = 0; i < N; i++) {
			if (L[i] == -1 && dfs(i)) { ++flow; }
		}
		if (flow == 0) { break; }
		ret += flow;
	}
	return ret;
}


// Bipartite Matching O(VE)

ll N, M;
ll L[MAX];
ll R[MAX];
ll visited[MAX];
vector<ll> adj[MAX];

bool dfs(ll n) {
	visited[n] = true;
	for (auto it : adj[n]) {
		if (R[it] == -1 || !visited[R[it]] && dfs(R[it])) {
			L[n] = it;
			R[it] = n;
			return true;
		}
	}
	return false;
}
ll bipartite() {
	ll ret = 0;
	memset(L, -1, sizeof(L));
	memset(R, -1, sizeof(R));
	while (true) {
		ll flow = 0;
		memset(visited, false, sizeof(visited));
		for (ll i = 0; i < N; i++) {
			if (L[i] == -1 && dfs(i)) { ++flow; }
		}
		if (flow == 0) { break; }
		ret += flow;
	}
	return ret;
}


// MaxFlow - MinCost O(V*E*F)~O(E*F)

struct Edge {
	ll to, cap, flow, cost;
	Edge* reverse;
	Edge(ll _to, ll _cap, ll _cost) :to(_to), cap(_cap), cost(_cost), flow(0) {}
	ll spare() { return cap - flow; }
	void add(ll f) {
		this->flow += f;
		reverse->flow -= f;
	}
};

ll N, M, s, t;
vector<Edge*> adj[MAX];

void addEdge(ll from, ll to, ll cap, ll cost) {
	Edge* e1 = new Edge(to, cap, cost);
	Edge* e2 = new Edge(from, 0, -cost);
	e1->reverse = e2; e2->reverse = e1;
	adj[from].push_back(e1);
	adj[to].push_back(e2);
}
pair<ll, ll> MCMF() {
	pi ret;
	ll cans = 0, fans = 0;
	while (true) {
		ll dis[MAX]; fill(dis, dis + MAX, INF);
		ll prev[MAX]; memset(prev, -1, sizeof(prev));
		bool inQ[MAX]; memset(inQ, false, sizeof(inQ));
		Edge* path[MAX];
		queue<ll> myqueue;

		myqueue.push(s); inQ[s] = true; dis[s] = 0;
		while (!myqueue.empty()) {
			ll cur = myqueue.front(); myqueue.pop(); inQ[cur] = false;
			for (auto it : adj[cur]) {
				if (it->spare() > 0 && dis[it->to] > dis[cur] + it->cost) {
					if (!inQ[it->to]) { myqueue.push(it->to); inQ[it->to] = true; }
					dis[it->to] = dis[cur] + it->cost;
					prev[it->to] = cur;
					path[it->to] = it;
				}
			}
		}
		if (prev[t] == -1) { break; }
		ll flow = INF;
		for (ll i = t; i != s; i = prev[i]) {
			flow = min(flow, path[i]->spare());
		}
		fans += flow;
		for (ll i = t; i != s; i = prev[i]) {
			cans += path[i]->cost;
			path[i]->add(fans);
		}
	}
	ret.first = fans;
	ret.second = cans;
	return ret;
}


// Circulation by Dinic O(V^2*E)

void addEdge(ll from, ll to, ll cap) {
	Edge* e1 = new Edge(to, cap);
	Edge* e2 = new Edge(from, 0);
	e1->reverse = e2; e2->reverse = e1;
	adj[from].push_back(e1);
	adj[to].push_back(e2);
}
void addLREdge(ll index) {
	ll from, to, l, r; cin >> from >> to >> l >> r;
	demand[from] -= l; demand[to] += l;
	Edge* e1 = new Edge(to, r - l);
	Edge* e2 = new Edge(from, 0);
	e1->reverse = e2; e2->reverse = e1;
	adj[from].push_back(e1);
	adj[to].push_back(e2);
	elist[index] = e1;
	L[index] = l;
}
bool bfs() {
	memset(level, -1, sizeof(level));
	level[s] = 0; myqueue.push(s);
	while (!myqueue.empty()) {
		ll cur = myqueue.front(); myqueue.pop();
		for (auto it : adj[cur]) {
			if (it->spare() > 0 && level[it->to] == -1) {
				myqueue.push(it->to); level[it->to] = level[cur] + 1;
			}
		}
	}
	if (level[t] == -1) { return false; }
	return true;
}
ll dfs(ll n, ll flow) {
	if (n == t) { return flow; }
	for (ll& i = see[n]; i < (ll)adj[n].size(); i++) {
		ll next = adj[n][i]->to;
		if (adj[n][i]->spare() > 0 && level[next] == level[n] + 1) {
			ll f = dfs(next, min(flow, adj[n][i]->spare()));
			if (f > 0) { adj[n][i]->add(f); return f; }
		}
	}
	return 0;
}
ll dinic() {
	ll ret = 0;
	while (bfs()) {
		memset(see, 0, sizeof(see));
		while (true) {
			ll f = dfs(s, INF);
			if (f == 0) { break; }
			ret += f;
		}
	}
	return ret;
}
void circulation() {
	ll S = 0, T = 0;
	for (int i = 1; i <= N; i++) {
		if (demand[i] > 0) { addEdge(0, i, demand[i]); S += demand[i]; }
		if (demand[i] < 0) { addEdge(i, t, -demand[i]); T -= demand[i]; }
	}
	if (S != T) { cout << -1; return; }

	ll flow = dinic();
	if (flow != S) { cout << -1; return; }
	else {
		cout << 1 << "\n";
		for (int i = 0; i < M; i++) {
			cout << elist[i]->flow + L[i] << "\n";
		}
	}
}