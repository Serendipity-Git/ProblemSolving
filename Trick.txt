
// Fast Fourier Transform && convolution
// query(A,B)는 다항식 A와 B의 곱을 벡터로 리턴한다.
struct FFT{
    // 출처: https://blog.myungwoo.kr/54 [PS 이야기]
	FFT(){;}

    void fft(vector<inum>& a) {
        int n = a.size(), L = 31 - __builtin_clz(n);
        static vector<complex<ld>> R(2, 1);
        static vector<inum> rt(2, 1);
        for (static int k = 2; k < n; k *= 2) {
            R.resize(n); rt.resize(n);
            auto x = polar(1.0L, acos(-1.0L) / k);
            for (int i=k;i<k+k;i++) rt[i] = R[i] = i&1 ? R[i/2] * x : R[i/2];
        }
        vector<int> rev(n);
        for (int i=0;i<n;i++) rev[i] = (rev[i / 2] | (i & 1) << L) / 2;
        for (int i=0;i<n;i++) if (i < rev[i]) swap(a[i], a[rev[i]]);
        for (int k = 1; k < n; k *= 2){
            for (int i = 0; i < n; i += 2 * k) for (int j=0;j<k;j++) {
                auto x = (double *)&rt[j+k], y = (double *)&a[i+j+k];                
                inum z(x[0]*y[0] - x[1]*y[1], x[0]*y[1] + x[1]*y[0]);     
                a[i + j + k] = a[i + j] - z;
                a[i + j] += z;
            }
        }
    }
 
    vector<ll> query(const vector<ll>& a, const vector<ll>& b) {
        if (a.empty() || b.empty()) return {};
        vector<ll> ret(a.size()+b.size() - 1);
        int L = 32 - __builtin_clz(ret.size()), n = 1 << L;
        vector<inum> in(n), out(n);
        copy(a.begin(),a.end(), begin(in));
        for (int i=0;i<b.size();i++) in[i].imag(b[i]);
        fft(in);
        for (inum& x: in) x *= x;
        for (int i=0;i<n;i++) out[i] = in[-i & (n - 1)] - conj(in[i]);
        fft(out);
        for (int i=0;i<ret.size();i++){
            ret[i] = static_cast<ll>(imag(out[i]) / (4 * n) + (is_integral_v<ll> ? (imag(out[i]) > 0 ? 0.5 : -0.5) : 0));
        }
        return ret;
    }
};

// koosaga fft
namespace fft{
    typedef long long lint;
    typedef complex<double> base;
    void fft(vector<base> &a, bool inv){
        int n = a.size(), j = 0;
        vector<base> roots(n/2);
        for(int i=1; i<n; i++){
            int bit = (n >> 1);
            while(j >= bit){
                j -= bit;
                bit >>= 1;
            }
            j += bit;
            if(i < j) swap(a[i], a[j]);
        }
        double ang = 2 * acos(-1) / n * (inv ? -1 : 1);
        for(int i=0; i<n/2; i++){
            roots[i] = base(cos(ang * i), sin(ang * i));
        }
        /* In NTT, let prr = primitive root. Then,
        int ang = ipow(prr, (mod - 1) / n);
        if(inv) ang = ipow(ang, mod - 2);
        for(int i=0; i<n/2; i++){
            roots[i] = (i ? (1ll * roots[i-1] * ang % mod) : 1);
        }
        XOR Convolution : set roots[*] = 1.
        OR Convolution : set roots[*] = 1, and do following:
        if (!inv) {
            a[j + k] = u + v;
            a[j + k + i/2] = u;
        } else {
            a[j + k] = v;
            a[j + k + i/2] = u - v;
        }
        */
        for(int i=2; i<=n; i<<=1){
            int step = n / i;
            for(int j=0; j<n; j+=i){
                for(int k=0; k<i/2; k++){
                    base u = a[j+k], v = a[j+k+i/2] * roots[step * k];
                    a[j+k] = u+v;
                    a[j+k+i/2] = u-v;
                }
            }
        }
        if(inv) for(int i=0; i<n; i++) a[i] /= n; // skip for OR convolution.
    }

    vector<lint> multiply(vector<lint> &v, vector<lint> &w){
        vector<base> fv(v.begin(), v.end()), fw(w.begin(), w.end());
        int n = 2; while(n < v.size() + w.size()) n <<= 1;
        fv.resize(n); fw.resize(n);
        fft(fv, 0); fft(fw, 0);
        for(int i=0; i<n; i++) fv[i] *= fw[i];
        fft(fv, 1);
        vector<lint> ret(n);
        for(int i=0; i<n; i++) ret[i] = (lint)round(fv[i].real());
        return ret;
    }
    vector<lint> multiply(vector<lint> &v, vector<lint> &w, lint mod){
        int n = 2; while(n < v.size() + w.size()) n <<= 1;
        vector<base> v1(n), v2(n), r1(n), r2(n);
        for(int i=0; i<v.size(); i++){
            v1[i] = base(v[i] >> 15, v[i] & 32767);
        }
        for(int i=0; i<w.size(); i++){
            v2[i] = base(w[i] >> 15, w[i] & 32767);
        }
        fft(v1, 0);
        fft(v2, 0);
        for(int i=0; i<n; i++){
            int j = (i ? (n - i) : i);
            base ans1 = (v1[i] + conj(v1[j])) * base(0.5, 0);
            base ans2 = (v1[i] - conj(v1[j])) * base(0, -0.5);
            base ans3 = (v2[i] + conj(v2[j])) * base(0.5, 0);
            base ans4 = (v2[i] - conj(v2[j])) * base(0, -0.5);
            r1[i] = (ans1 * ans3) + (ans1 * ans4) * base(0, 1);
            r2[i] = (ans2 * ans3) + (ans2 * ans4) * base(0, 1);
        }
        fft(r1, 1);
        fft(r2, 1);
        vector<lint> ret(n);
        for(int i=0; i<n; i++){
            lint av = (lint)round(r1[i].real());
            lint bv = (lint)round(r1[i].imag()) + (lint)round(r2[i].real());
            lint cv = (lint)round(r2[i].imag());
            av %= mod, bv %= mod, cv %= mod;
            ret[i] = (av << 30) + (bv << 15) + cv;
            ret[i] %= mod;
            ret[i] += mod;
            ret[i] %= mod;
        }
        return ret;
    }
};

// Convex hull trick (Monotone slope)
// dp(i) = min(M(j)*X(i) + N(j)) + C(i) (쪼개는 dp 최적화)
// 처리하는 M(j),X(i)가 monotone한 경우의 CHT이다.

struct linear{
    ll m,n;
    ld s;
    linear(){;}
    linear(ll _m, ll _n, ld _s):m(_m),n(_n),s(_s){}
    ll val(ll x){return m*x+n;}
    ld intersect(const linear& l){
        return (ld)(l.n-n)/(m-l.m);
    }
};
struct maxhull{
    int r=0;
    vector<linear> line;
    maxhull(){r=0;}
    void add(ll m, ll n){
        if (line.empty()){
            line.push_back({m,n,-LLINF});
        }else{
            bool push=true;
            linear new_l = linear(m, n,-LLINF);
            while(line.size()>0){
                if (line.back().m==new_l.m){
                    if (line.back().n<new_l.n){line.pop_back();}
                    else{return;}
                }else{
                    if (line.back().intersect(new_l)<=line.back().s){line.pop_back();}
                    else{break;}
                }
            }
            if (line.empty()){new_l.s = -LLINF;}
            else{new_l.s = line.back().intersect(new_l);}
            line.push_back(new_l);
        }
    }
    ll query(ll x){
        r=min(r,(int)line.size()-1);
        while(r+1<line.size() && line[r+1].s<=x){++r;}
        return line[r].val(x);
    }
};
struct minhull{
    int r=0;
    vector<linear> line;
    minhull(){r=0;}
    void add(ll m, ll n){
        if (line.empty()){
            line.push_back({m,n,-LLINF});
        }else{
            bool push=true;
            linear new_l = linear(m, n,-LLINF);
            while(line.size()>0){
                if (line.back().m==new_l.m){
                    if (line.back().n>new_l.n){line.pop_back();}
                    else{return;}
                }else{
                    if (line.back().intersect(new_l)<=line.back().s){line.pop_back();}
                    else{break;}
                }
            }
            if (line.empty()){new_l.s = -LLINF;}
            else{new_l.s = line.back().intersect(new_l);}
            line.push_back(new_l);
        }
    }
    ll query(ll x){
        r=min(r,(int)line.size()-1);
        while(r+1<line.size() && line[r+1].s<=x){++r;}
        return line[r].val(x);
    }
};

// Convex hull Trick (Online)
// Online CHT O(nlogn)
// Reference from https://github.com/kth-competitive-programming/kactl/blob/master/content/data-structures/LineContainer.h
// MAX Convex Hull Trick API
// To convert minCHT, input -m, -n and output -query.

struct Line {
	mutable ll k, m, p;
	bool operator<(const Line& o) const { return k < o.k; }
	bool operator<(ll x) const { return p < x; }
};
struct LineContainer : multiset<Line, less<>> {
    // Reference from https://github.com/kth-competitive-programming/kactl/blob/master/content/data-structures/LineContainer.h
    // MAX Convex Hull Trick API
	// (for doubles, use inf = 1/.0, div(a,b) = a/b)
	static const ll inf = LLONG_MAX;
	ll div(ll a, ll b) { // floored division
		return a / b - ((a ^ b) < 0 && a % b);
	}
	bool isect(iterator x, iterator y) {
		if (y == end()) return x->p = inf, 0;
		if (x->k == y->k) x->p = x->m > y->m ? inf : -inf;
		else x->p = div(y->m - x->m, x->k - y->k);
		return x->p >= y->p;
	}
	void add(ll k, ll m) {
		auto z = insert({ k, m, 0 }), y = z++, x = y;
		while (isect(y, z)) z = erase(z);
		if (x != begin() && isect(--x, y)) isect(x, y = erase(y));
		while ((y = x) != begin() && (--x)->p >= y->p)
			isect(x, erase(y));
	}
	ll query(ll x) {
		assert(!empty());
		auto l = *lower_bound(x);
		return l.k * x + l.m;
	}
};
struct minhull{
    LineContainer hull;

    minhull(){;}
    void add(ll m, ll n){
        hull.add(-m,-n);
    }
    ll query(ll x){
        return -hull.query(x);
    }
};
struct maxhull{
    LineContainer hull;

    maxhull(){;}
    void add(ll m, ll n){
        hull.add(m,n);
    }
    ll query(ll x){
        return hull.query(x);
    }
};


// Knuth optimization
// O(N^3) -> O(N^2)
// dp(j,i) = min(dp(j,k) + dp(k+1,i)) + c(j,i) (Range DP를 최적화한다)

opt(j,i)는 dp(j,i)를 최적화하는 k값이라고 하자

1. opt(j,i-1) <= opt(j,i) <= opt(j+1,i) 이면 사용 가능

2. c(j,i)가 아래 조건을 만족하면 opt가 조건을 만족시킴 (a<b<c<d)
- c(b,c) <= c(a,d) (단조성)
- c(a,c) + c(b,d) <= c(a,d) + c(b,c) (사각부등식)

// dp table 채우는 코드
for (int j=N-1;j>=0;j--){
    for (int i=j+1;i<N;i++){
        pair<ll,int> ret = {LLINF,-1};
        for (int k=opt[j][i-1]; k<=min(opt[j+1][i],i-1);k++){
            ret = min(ret,{dp[j][k] + dp[k+1][i] + c(j,i),k});
        }
        dp[j][i] = ret.first;
        opt[j][i] = ret.second;
    }
}


// Divide and Conquer optimization 
// O(KN^2) -> O(KNlogN)
// dp(k,i) = min dp(k-1,j-1) + c(j,i) (k-partition dp)

k번째 row를 채울때, opt(i)는 dp(k,i)를 최적화하는 j값이라고 하자

1. opt(i) <= opt(i+1)이면 DNC Optimization이 가능하다.

2. c(j,i)가 아래 조건을 만족하면 opt가 조건을 만족시킴 (a<b<c<d)
- c(a,c) + c(b,d) <= c(a,d) + c(b,c) (사각부등식)

k번째 row를 채우는 순서를 바꾼다고 생각하면 쉽다.

// 하나의 row 채우는 코드
function<void(int,int,int,int)> calc=[&](int l, int r, int optl, int optr){
    if (l>r){return;}
    int mid = (l+r)>>1;
    pair<ll,int> ret = {LLINF,-1};
    for (int i=optl;i<=min(mid,optr);i++){
        ret = min(ret,{dp[i-1]+c(i,mid),i});
    }
    new_dp[mid] = ret.first;
    int opt = ret.second;
    calc(l,mid-1,optl,opt);
    calc(mid+1,r,opt,optr);
};
