
// Fast Fourier Transform && convolution

int bitReverse(int n, int k) {
    int r, i;
    for (r = 0, i = 0; i < k; ++i) { r |= ((n >> i) & 1) << (k - i - 1); }
    return r;
}
void fft(vector<inum>& a, bool reverse) {
    const int n = (int)a.size();
    int t = n, k = 0; while (t > 1) { t >>= 1; ++k; }

    for (int i = 0; i < n; i++) {
        int j = bitReverse(i, k);
        if (i < j) { swap(a[i], a[j]); }
    }

    for (int s = 2; s <= n; s *= 2) {
        double t = 2 * PI / s * (reverse ? -1 : 1);
        inum ws(cos(t), sin(t));
        for (int j = 0; j < n; j += s) {
            inum w(1, 0);
            for (int i = 0; i < s / 2; i++) {
                inum temp = a[j + i + s / 2] * w;
                a[j + i + s / 2] = a[j + i] - temp;
                a[j + i] += temp;
                w *= ws;
            }
        }
    }
    if (reverse) { for (int i = 0; i < n; i++) { a[i] /= n; } }
}
void convolution(vector<inum>& a, vector<inum>& b) {
    int al = (int)a.size(); int bl = (int)b.size();
    int np = 1; while (np < al + bl) { np <<= 1; }

    a.resize(np); b.resize(np);
    fft(a, false);
    fft(b, false);
    for (int i = 0; i < np; i++) { a[i] *= b[i]; }
    fft(a, true);
}


// Convex hull trick
// Can only use when M simply decreases/increases
// Offline CHT

struct line {
    ll m, n; ld from;

    line(ll _m, ll _n) : m(_m), n(_n), from(-INF) {}
    
    ld cross(const line& other) {
        return 1.0 * (other.n - n) / (m - other.m);
    }
};
void CHT{
    ll lo = 0;
    for (int i = 1; i <= N; i++) {
        line newline(M(j), N(j)); // depending on the problem
        
        while (!hull.empty()) {
            line top = hull.back();
            if (top.from < newline.cross(top)) {
                newline.from = newline.cross(top);
                break;
            }
            hull.pop_back();
            if (lo == hull.size()) { --lo; }
        }
        hull.push_back(newline);

        ll x = S[i];
        while (lo + 1 < hull.size() && hull[lo + 1].from < x) { ++lo; }
        DP[i] = hull[lo].m * x + hull[lo].n + VAL(i); // depending on the problem
    }
    cout << DP[N];
}

// Convex hull Trick (Online)
// Online CHT O(nlogn)
// Reference from https://github.com/kth-competitive-programming/kactl/blob/master/content/data-structures/LineContainer.h
// MAX Convex Hull Trick API

struct Line {
	mutable ll k, m, p;
	bool operator<(const Line& o) const { return k < o.k; }
	bool operator<(ll x) const { return p < x; }
};
struct LineContainer : multiset<Line, less<>> {
	// (for doubles, use inf = 1/.0, div(a,b) = a/b)
	static const ll inf = LLONG_MAX;
	ll div(ll a, ll b) { // floored division
		return a / b - ((a ^ b) < 0 && a % b);
	}
	bool isect(iterator x, iterator y) {
		if (y == end()) return x->p = inf, 0;
		if (x->k == y->k) x->p = x->m > y->m ? inf : -inf;
		else x->p = div(y->m - x->m, x->k - y->k);
		return x->p >= y->p;
	}
	void add(ll k, ll m) {
		auto z = insert({ k, m, 0 }), y = z++, x = y;
		while (isect(y, z)) z = erase(z);
		if (x != begin() && isect(--x, y)) isect(x, y = erase(y));
		while ((y = x) != begin() && (--x)->p >= y->p)
			isect(x, erase(y));
	}
	ll query(ll x) {
		assert(!empty());
		auto l = *lower_bound(x);
		return l.k * x + l.m;
	}
};
