// Fast Fourier Transform
namespace FFT{
    #define rep(i, a, b) for(int i = a; i < (b); ++i)
    #define all(x) begin(x), end(x)
    #define sz(x) (int)(x).size()
    typedef vector<int> vi;
    typedef complex<double> C;
    typedef vector<double> vd;
    void fft(vector<C>& a) {
        int n = sz(a), L = 31 - __builtin_clz(n);
        static vector<complex<long double>> R(2, 1);
        static vector<C> rt(2, 1);  // (^ 10% faster if double)
        for (static int k = 2; k < n; k *= 2) {
            R.resize(n); rt.resize(n);
            auto x = polar(1.0L, acos(-1.0L) / k);
            rep(i,k,2*k) rt[i] = R[i] = i&1 ? R[i/2] * x : R[i/2];
        }
        vi rev(n);
        rep(i,0,n) rev[i] = (rev[i / 2] | (i & 1) << L) / 2;
        rep(i,0,n) if (i < rev[i]) swap(a[i], a[rev[i]]);
        for (int k = 1; k < n; k *= 2)
            for (int i = 0; i < n; i += 2 * k) rep(j,0,k) {
                // C z = rt[j+k] * a[i+j+k]; // (25% faster if hand-rolled)  /// include-line
                auto x = (double *)&rt[j+k], y = (double *)&a[i+j+k];        /// exclude-line
                C z(x[0]*y[0] - x[1]*y[1], x[0]*y[1] + x[1]*y[0]);           /// exclude-line
                a[i + j + k] = a[i + j] - z;
                a[i + j] += z;
            }
    }
    vd conv(const vd& a, const vd& b) {
        if (a.empty() || b.empty()) return {};
        vd res(sz(a) + sz(b) - 1);
        int L = 32 - __builtin_clz(sz(res)), n = 1 << L;
        vector<C> in(n), out(n);
        copy(all(a), begin(in));
        rep(i,0,sz(b)) in[i].imag(b[i]);
        fft(in);
        for (C& x : in) x *= x;
        rep(i,0,n) out[i] = in[-i & (n - 1)] - conj(in[i]);
        fft(out);
        rep(i,0,sz(res)) res[i] = imag(out[i]) / (4 * n);
        return res;
    }
    // Higher Precision FFT (Modular)
    typedef vector<ll> vl;
    template<int M> vl convMod(const vl &a, const vl &b) {
        if (a.empty() || b.empty()) return {};
        vl res(sz(a) + sz(b) - 1);
        int B=32-__builtin_clz(sz(res)), n=1<<B, cut=int(sqrt(M));
        vector<C> L(n), R(n), outs(n), outl(n);
        rep(i,0,sz(a)) L[i] = C((int)a[i] / cut, (int)a[i] % cut);
        rep(i,0,sz(b)) R[i] = C((int)b[i] / cut, (int)b[i] % cut);
        fft(L), fft(R);
        rep(i,0,n) {
            int j = -i & (n - 1);
            outl[j] = (L[i] + conj(L[j])) * R[i] / (2.0 * n);
            outs[j] = (L[i] - conj(L[j])) * R[i] / (2.0 * n) / 1i;
        }
        fft(outl), fft(outs);
        rep(i,0,sz(res)) {
            ll av = ll(real(outl[i])+.5), cv = ll(imag(outs[i])+.5);
            ll bv = ll(imag(outl[i])+.5) + ll(real(outs[i])+.5);
            res[i] = ((av % M * cut + bv) % M * cut + cv) % M;
        }
        return res;
    }
}

// Number Theoretic Transform
namespace NTT{
    #define rep(i, a, b) for(int i = a; i < (b); ++i)
    #define all(x) begin(x), end(x)
    #define sz(x) (int)(x).size()
    typedef vector<int> vi;
    typedef vector<ll> vl;
    const ll mod = (119 << 23) + 1, root = 62; // = 998244353
    // For p < 2^30 there is also e.g. 5 << 25, 7 << 26, 479 << 21
    // and 483 << 21 (same root). The last two are > 10^9.
    void ntt(vl &a) {
        int n = sz(a), L = 31 - __builtin_clz(n);
        static vl rt(2, 1);
        for (static int k = 2, s = 2; k < n; k *= 2, s++) {
            rt.resize(n);
            ll z[] = {1, power(root, mod >> s, mod)};
            rep(i,k,2*k) rt[i] = rt[i / 2] * z[i & 1] % mod;
        }
        vi rev(n);
        rep(i,0,n) rev[i] = (rev[i / 2] | (i & 1) << L) / 2;
        rep(i,0,n) if (i < rev[i]) swap(a[i], a[rev[i]]);
        for (int k = 1; k < n; k *= 2)
            for (int i = 0; i < n; i += 2 * k) rep(j,0,k) {
                ll z = rt[j + k] * a[i + j + k] % mod, &ai = a[i + j];
                a[i + j + k] = ai - z + (z > ai ? mod : 0);
                ai += (ai + z >= mod ? z - mod : z);
            }
    }
    vl conv(const vl &a, const vl &b) {
        if (a.empty() || b.empty()) return {};
        int s = sz(a) + sz(b) - 1, B = 32 - __builtin_clz(s), n = 1 << B;
        int inv = power(n, mod - 2, mod);
        vl L(a), R(b), out(n);
        L.resize(n), R.resize(n);
        ntt(L), ntt(R);
        rep(i,0,n) out[-i & (n - 1)] = (ll)L[i] * R[i] % mod * inv % mod;
        ntt(out);
        return {out.begin(), out.begin() + s};
    }
}


// Convex hull trick (Monotone slope)
// dp(i) = min(M(j)*X(i) + N(j)) + C(i) (쪼개는 dp 최적화)
// 처리하는 M(j),X(i)가 monotone한 경우의 CHT이다.

struct linear{
    ll m,n;
    ld s;
    linear(){;}
    linear(ll _m, ll _n, ld _s):m(_m),n(_n),s(_s){}
    ll val(ll x){return m*x+n;}
    ld intersect(const linear& l){
        return (ld)(l.n-n)/(m-l.m);
    }
};
struct maxhull{
    int r=0;
    vector<linear> line;
    maxhull(){r=0;}
    void add(ll m, ll n){
        if (line.empty()){
            line.push_back({m,n,-LLINF});
        }else{
            bool push=true;
            linear new_l = linear(m, n,-LLINF);
            while(line.size()>0){
                if (line.back().m==new_l.m){
                    if (line.back().n<new_l.n){line.pop_back();}
                    else{return;}
                }else{
                    if (line.back().intersect(new_l)<=line.back().s){line.pop_back();}
                    else{break;}
                }
            }
            if (line.empty()){new_l.s = -LLINF;}
            else{new_l.s = line.back().intersect(new_l);}
            line.push_back(new_l);
        }
    }
    ll query(ll x){
        r=min(r,(int)line.size()-1);
        while(r+1<line.size() && line[r+1].s<=x){++r;}
        return line[r].val(x);
    }
};
struct minhull{
    int r=0;
    vector<linear> line;
    minhull(){r=0;}
    void add(ll m, ll n){
        if (line.empty()){
            line.push_back({m,n,-LLINF});
        }else{
            bool push=true;
            linear new_l = linear(m, n,-LLINF);
            while(line.size()>0){
                if (line.back().m==new_l.m){
                    if (line.back().n>new_l.n){line.pop_back();}
                    else{return;}
                }else{
                    if (line.back().intersect(new_l)<=line.back().s){line.pop_back();}
                    else{break;}
                }
            }
            if (line.empty()){new_l.s = -LLINF;}
            else{new_l.s = line.back().intersect(new_l);}
            line.push_back(new_l);
        }
    }
    ll query(ll x){
        r=min(r,(int)line.size()-1);
        while(r+1<line.size() && line[r+1].s<=x){++r;}
        return line[r].val(x);
    }
};

// Convex hull Trick (Online)
// Online CHT O(nlogn)
// Reference from https://github.com/kth-competitive-programming/kactl/blob/master/content/data-structures/LineContainer.h
// MAX Convex Hull Trick API
// To convert minCHT, input -m, -n and output -query.

struct Line {
	mutable ll k, m, p;
	bool operator<(const Line& o) const { return k < o.k; }
	bool operator<(ll x) const { return p < x; }
};
struct LineContainer : multiset<Line, less<>> {
    // Reference from https://github.com/kth-competitive-programming/kactl/blob/master/content/data-structures/LineContainer.h
    // MAX Convex Hull Trick API
	// (for doubles, use inf = 1/.0, div(a,b) = a/b)
	static const ll inf = LLONG_MAX;
	ll div(ll a, ll b) { // floored division
		return a / b - ((a ^ b) < 0 && a % b);
	}
	bool isect(iterator x, iterator y) {
		if (y == end()) return x->p = inf, 0;
		if (x->k == y->k) x->p = x->m > y->m ? inf : -inf;
		else x->p = div(y->m - x->m, x->k - y->k);
		return x->p >= y->p;
	}
	void add(ll k, ll m) {
		auto z = insert({ k, m, 0 }), y = z++, x = y;
		while (isect(y, z)) z = erase(z);
		if (x != begin() && isect(--x, y)) isect(x, y = erase(y));
		while ((y = x) != begin() && (--x)->p >= y->p)
			isect(x, erase(y));
	}
	ll query(ll x) {
		assert(!empty());
		auto l = *lower_bound(x);
		return l.k * x + l.m;
	}
};
struct minhull{
    LineContainer hull;

    minhull(){;}
    void add(ll m, ll n){
        hull.add(-m,-n);
    }
    ll query(ll x){
        return -hull.query(x);
    }
};
struct maxhull{
    LineContainer hull;

    maxhull(){;}
    void add(ll m, ll n){
        hull.add(m,n);
    }
    ll query(ll x){
        return hull.query(x);
    }
};


// Knuth optimization
// O(N^3) -> O(N^2)
// dp(j,i) = min(dp(j,k) + dp(k+1,i)) + c(j,i) (Range DP를 최적화한다)

opt(j,i)는 dp(j,i)를 최적화하는 k값이라고 하자

1. opt(j,i-1) <= opt(j,i) <= opt(j+1,i) 이면 사용 가능

2. c(j,i)가 아래 조건을 만족하면 opt가 조건을 만족시킴 (a<b<c<d)
- c(b,c) <= c(a,d) (단조성)
- c(a,c) + c(b,d) <= c(a,d) + c(b,c) (사각부등식)

// dp table 채우는 코드
for (int j=N-1;j>=0;j--){
    for (int i=j+1;i<N;i++){
        pair<ll,int> ret = {LLINF,-1};
        for (int k=opt[j][i-1]; k<=min(opt[j+1][i],i-1);k++){
            ret = min(ret,{dp[j][k] + dp[k+1][i] + c(j,i),k});
        }
        dp[j][i] = ret.first;
        opt[j][i] = ret.second;
    }
}


// Divide and Conquer optimization 
// O(KN^2) -> O(KNlogN)
// dp(k,i) = min dp(k-1,j-1) + c(j,i) (k-partition dp)

k번째 row를 채울때, opt(i)는 dp(k,i)를 최적화하는 j값이라고 하자

1. opt(i) <= opt(i+1)이면 DNC Optimization이 가능하다.

2. c(j,i)가 아래 조건을 만족하면 opt가 조건을 만족시킴 (a<b<c<d)
- c(a,c) + c(b,d) <= c(a,d) + c(b,c) (사각부등식)

k번째 row를 채우는 순서를 바꾼다고 생각하면 쉽다.

// 하나의 row 채우는 코드
function<void(int,int,int,int)> calc=[&](int l, int r, int optl, int optr){
    if (l>r){return;}
    int mid = (l+r)>>1;
    pair<ll,int> ret = {LLINF,-1};
    for (int i=optl;i<=min(mid,optr);i++){
        ret = min(ret,{dp[i-1]+c(i,mid),i});
    }
    new_dp[mid] = ret.first;
    int opt = ret.second;
    calc(l,mid-1,optl,opt);
    calc(mid+1,r,opt,optr);
};


// Linear Programming (LPSolver)
/**
 * Author: Stanford
 * Source: Stanford Notebook
 * License: MIT
 * Description: Solves a general linear maximization problem: maximize c^T x subject to Ax <= b, x >= 0.
 * Returns -inf if there is no solution, inf if there are arbitrarily good solutions, or the maximum value of c^T x otherwise.
 * The input vector is set to an optimal x (or in the unbounded case, an arbitrary solution fulfilling the constraints).
 * Numerical stability is not guaranteed. For better performance, define variables such that x = 0 is viable.
 * Usage:
 * vvd A = {{1,-1}, {-1,1}, {-1,-2}};
 * vd b = {1,1,-4}, c = {-1,-1}, x;
 * T val = LPSolver(A, b, c).solve(x);
 * Time: O(NM * pivots), where a pivot may be e.g. an edge relaxation. O(2^n) in the general case.
 * Status: seems to work?
 */

#pragma once
typedef double T; // long double, Rational, double + mod<P>...
typedef vector<T> vd;
typedef vector<vd> vvd;
const T eps = 1e-8, inf = 1/.0;
#define MP make_pair
#define ltj(X) if(s == -1 || MP(X[j],N[j]) < MP(X[s],N[s])) s=j

struct LPSolver {
	int m, n;
	vi N, B;
	vvd D;

	LPSolver(const vvd& A, const vd& b, const vd& c) :
		m(sz(b)), n(sz(c)), N(n+1), B(m), D(m+2, vd(n+2)) {
			rep(i,0,m) rep(j,0,n) D[i][j] = A[i][j];
			rep(i,0,m) { B[i] = n+i; D[i][n] = -1; D[i][n+1] = b[i];}
			rep(j,0,n) { N[j] = j; D[m][j] = -c[j]; }
			N[n] = -1; D[m+1][n] = 1;
		}

	void pivot(int r, int s) {
		T *a = D[r].data(), inv = 1 / a[s];
		rep(i,0,m+2) if (i != r && abs(D[i][s]) > eps) {
			T *b = D[i].data(), inv2 = b[s] * inv;
			rep(j,0,n+2) b[j] -= a[j] * inv2;
			b[s] = a[s] * inv2;
		}
		rep(j,0,n+2) if (j != s) D[r][j] *= inv;
		rep(i,0,m+2) if (i != r) D[i][s] *= -inv;
		D[r][s] = inv;
		swap(B[r], N[s]);
	}

	bool simplex(int phase) {
		int x = m + phase - 1;
		for (;;) {
			int s = -1;
			rep(j,0,n+1) if (N[j] != -phase) ltj(D[x]);
			if (D[x][s] >= -eps) return true;
			int r = -1;
			rep(i,0,m) {
				if (D[i][s] <= eps) continue;
				if (r == -1 || MP(D[i][n+1] / D[i][s], B[i])
				             < MP(D[r][n+1] / D[r][s], B[r])) r = i;
			}
			if (r == -1) return false;
			pivot(r, s);
		}
	}

	T solve(vd &x) {
		int r = 0;
		rep(i,1,m) if (D[i][n+1] < D[r][n+1]) r = i;
		if (D[r][n+1] < -eps) {
			pivot(r, n);
			if (!simplex(2) || D[m+1][n+1] < -eps) return -inf;
			rep(i,0,m) if (B[i] == -1) {
				int s = 0;
				rep(j,1,n+1) ltj(D[i]);
				pivot(i, s);
			}
		}
		bool ok = simplex(1); x = vd(n);
		rep(i,0,m) if (B[i] < n) x[B[i]] = D[i][n+1];
		return ok ? D[m][n+1] : inf;
	}
};